#+TITLE:   My custom DOOM EMACS Config
#+DATE:    July 23, 2020
#+AUTHOR:  jjpark89@outlook.com

** Table of Contents :TOC_3_gh:
  - [[#initialize][Initialize]]
    - [[#load-config-from-files][Load Config from files]]
    - [[#packages][Packages]]
    - [[#custom-setup][Custom Setup]]
    - [[#useful-bindings][Useful Bindings]]
  - [[#programming][Programming]]
    - [[#ccls-custom-setting][CCLS Custom Setting]]
    - [[#vue--typescript-custom-setting][Vue & Typescript Custom Setting]]
  - [[#magit--forge][Magit / Forge]]
  - [[#org-mode][Org-Mode]]
  - [[#rss-feed][RSS Feed]]
    - [[#custom-elfeed-search-column][Custom Elfeed Search Column]]
  - [[#utils][Utils]]
    - [[#ripgrep][Ripgrep]]
    - [[#google-stackoverflow-search][Google, StackOverFlow Search]]
    - [[#forge-custom-open-link][Forge Custom Open Link]]
    - [[#toggle-window-layout][Toggle Window Layout]]
  - [[#etc][ETC]]
    - [[#shell-utils][Shell Utils]]
    - [[#custom-variables][Custom Variables]]

** Initialize
*** Load Config from files
우선 한곳에 모든 설정들을 모아두면 알아보기 힘드니 대략적인 기능별로
파일을 나누어 관리한다.
#+BEGIN_SRC elisp :tangle config.el
(load! "+custom_funcs")
(load! "+private")
#+END_SRC
+private.el 파일에는 공개하기 곤란한 개인 토큰이나 패스워드등이 담겨 있다.
*** Packages
#+BEGIN_SRC elisp :tangle packages.el
(package! rainbow-delimiters)
(package! expand-region)
(package! dotenv-mode)
(package! wakatime-mode)
(package! company-tabnine)
(package! org-super-agenda)
(package! org-bullets)
(package! gitlab-ci-mode)
(package! beacon)
(package! carbon-now-sh)
(package! google-this)
(package! rg)
(package! swiper)
(package! magit-delta)
(package! exec-path-from-shell)
(package! evil-matchit)
(package! evil-textobj-anyblock)
(package! lsp-treemacs)
(package! git-link)
(package! magit-todos)
(package! tmux-pane)
(package! npm-mode)
(package! org-jira)
(package! nyan-mode)
(package! platformio-mode)
#+END_SRC
*** Custom Setup
**** Startup Setup
이맥스 관련 일반적인 사항들을 지정한다.
주로 특정 모드가 아닌 이맥스에 글로벌 설정들이 포함된다.
#+BEGIN_SRC elisp :tangle config.el
;; 사용자 이름 설정
(setq user-full-name "Jaejin Park"
      user-mail-address "jjpark78@gmail.com")
(setq-default frame-title-format '("DOOM EMACS"))
(setq auth-sources '("~/.authinfo"))
;; 바쁘게 버퍼전환 하는 와중에 화면이 울렁거리는게 멀미날것 같아서 프리뷰 옵션을 껐다
(setq +ivy-buffer-preview nil)
(setq avy-all-windows t)
(setq ivy-read-action-function #'ivy-hydra-read-action)
;; dired를 두개 열어 놓고 왔다 갔다하며 복사 붙여넣기 할때 편하다
;; (setq dired-dwim-target t)

(setq confirm-kill-emacs nil)
(setq which-key-idle-delay 0.5)
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))

;; 수동으로 직접 프레임 위치를 지정해줘 본다.
;; (setq initial-frame-alist '((top . 23) (left . 1175) (width . 125) (height . 80)))

(global-evil-matchit-mode)

;; 스나이프를 화면 보이는 영역으로 제한한다.
(setq evil-snipe-scope 'whole-visible)
(setq evil-snipe-repeat-scope 'whole-visible)

;; 와카타임이라고 본인이 얼마나 열심히 일했는지
;; 하루 일과를 잘 보여준다.
;; 개인으로만 쓰면 공짜인것도 매력임.
(global-wakatime-mode)

;; just for fun
(nyan-mode)
(nyan-start-animation)
#+END_SRC

**** UTF & Korean Input
한글 관련 설정
#+BEGIN_SRC elisp :tangle config.el
;; 한글 입력기 on
(setq default-input-method "korean-hangul")
(set-language-environment "Korean")
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
;; (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
(require 'ucs-normalize)
(set-file-name-coding-system 'utf-8-hfs)
#+END_SRC

**** UIs
이맥스의 ui설정에 관련된 사항.
#+BEGIN_SRC elisp :tangle config.el
;; 이것 저것 많이 바꿔봤지만 역시 기본 테마가 젤 이쁘다
(setq doom-theme 'doom-nord)

;; 노안이 왔는지 이제는 이정도 폰트 크기는 되어야 잘 보임
(setq doom-font (font-spec :family "FiraMono NF" :size 14))

(set-fringe-style '(nil . 0))

;; 한글 관련 폰트 스케일링 설정
;; (set-face-attribute 'default nil :height 130)
;; (set-fontset-font t 'hangul (font-spec :name "AppleGothic"))
;; (set-fontset-font t 'japanese-jisx0213.2004-1 (font-spec :name "AppleGothic"))
;; (set-fontset-font t 'katakana-jisx0201 (font-spec :name "AppleGothic"))

(setq face-font-rescale-alist
      '(("NanumGothicCoding" . 1.2307692307692308)
        ("AppleGothic" . 1.2307692307692308)
        ))
#+END_SRC

**** Doom Modeline
Doom modeline 관련 수정
#+BEGIN_SRC elisp :tangle config.el
(after! doom-modeline
  (setq
    doom-modeline-major-mode-icon t
    doom-modeline-buffer-encoding nil
    doom-modeline-mu4e t
    doom-modeline-buffer-file-name-style 'truncate-with-project))
#+END_SRC

**** Fine-tune
이맥스를 맥과 고해상도(FHD이상의 해상도)에서 쓰다보면 스크롤이 엄청 느려지는 경우가 있다.
여러 이슈들을 확인한 결과 어쩔수 없다 함.
해당 현상을 완화하는데 조금이나마 도움이 된다하여서
구글링을 통해 찾은 각종 튜닝들을 여기다가 넣어 놓았다.
#+BEGIN_SRC elisp :tangle config.el

;; 라인 넘버표시 하지 않는게 더 빠르다
;; 이유는 모름.
(setq display-line-numbers-type 'relative)
;; (setq display-line-numbers-type t)
;; (setq display-line-numbers-type nil)

;; 필요없는 부분은 동작하지 않는 특수 모드 활성화
(global-so-long-mode 1)

;; 더블버퍼링이 동작하도록 설정한다.
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
(setq scroll-conservatively 101)

;; lsp 관련 설정 메뉴들
;; 이맥스를 느리게 만드는 범인중 십중팔구 LSP가 관련되어져 있다고 함.
;; 해당 튜닝도 구글링을 통해서 찾았다.
(setq gc-cons-threshold 1000000000)
(setq read-process-output-max (* 1024 1024))
#+END_SRC

*** Useful Bindings
**** Bindings 1
단축키 설정
#+BEGIN_SRC elisp :tangle config.el
;; (map! "C-h" #'tmux-pane-omni-window-left)
;; (map! "C-j" #'tmux-pane-omni-window-down)
;; (map! "C-k" #'tmux-pane-omni-window-up)
;; (map! "C-l" #'tmux-pane-omni-window-right)
(map! "C-h" #'evil-window-left)
(map! "C-j" #'evil-window-down)
(map! "C-k" #'evil-window-up)
(map! "C-l" #'evil-window-right)
(map! :leader :prefix "g" :desc "ediff style diff from working-tree" "d" #'magit-ediff-show-working-tree)
;; go back, go references
(map! :n "gb" #'evil-jump-backward)
(map! :n "gr" #'+lookup/references)
;; 검색할때 브라우저를 찾는 수고를 줄여 준다.
(map! :leader :prefix "s" :desc "Search Google.com" "g" #'google-search)
(map! :leader :prefix "s" :desc "Search StackOverFlow" "v" #'stackoverflow-search)
(map! :leader :prefix "s" :desc "Search Buffers" "b" #'swiper-all)
(map! :leader :prefix "s" :desc "new project search file" "p" #'rg-project)
;; 가끔씩 즐겨보는 블로그들의 rss를 피드로 받아와서 읽을때 사용한다.
(map! :leader :prefix "o" :desc "Open news form RSS with ELfeed" "n" #'elfeed)
(map! :leader :prefix "o" :desc "Open mu4e to current window" "m" #'mu4e)
;; 버퍼끼리 화면 전환할때 프로젝트를 벗어 나지 않도록 강제한다.
(map! :leader :desc "workspace buffer list" "," #'+ivy/switch-workspace-buffer)
;; ORG 모드에서 쓰는 단축키들
(map! :leader :desc "Tangle Export" "ee" #'org-babel-tangle)
;; 커스텀 함수로 정의해둔 쉘 설정 파일불러오는 함수에게 단축기를 할당했음.
;; 자주 쓰지는 않는데 있어보이는 척 할때 아주 좋다.
(map! :leader :prefix "f" :desc "Open Shell init file on other windows" "i" #'er-find-shell-init-file)
(map! :leader :prefix "f" :desc "Open alacritty init file on other windows" "a" #'er-find-alacritty-init-file)
;; 코드를 입력받아서 이쁜 화면으로 만들어주는 패키지에 단축기를 할당했다.
(map! :leader :prefix "t" :desc "Capture Code with Carbon now" "t" #'carbon-now-sh)
;; change window split mode
;; 이맥스를 넓게 쓰다가 길게 쓰다가 할때마다 자주 쓰이는 레이아웃 번경 맛집 함수
(map! :leader :prefix "t" :desc "Toggle Window Split Style" "s" #'toggle-window-split)
;; ace-window
(map! :leader :prefix "w" :desc "open ace window to select window" "a" #'ace-window)
;; evil 에서 라인 처음과 마지막으로 더 빨리 점프할 수 있도록 한다.
(map! :leader :prefix "c" :desc "run npm script" "n" #'npm-mode-npm-run)
(define-key evil-visual-state-map (kbd "H") 'beginning-of-line-text)
(define-key evil-visual-state-map (kbd "L") 'evil-end-of-line)
(define-key evil-normal-state-map (kbd "H") 'beginning-of-line-text)
(define-key evil-normal-state-map (kbd "L") 'evil-end-of-line)
;; evil multi edit recommanded setting
(define-key evil-visual-state-map (kbd "M-s-m") 'evil-multiedit-match-all)
(define-key evil-normal-state-map (kbd "M-s-m") 'evil-multiedit-match-all)
(define-key evil-insert-state-map (kbd "M-s-m") 'evil-multiedit-match-all)
;; 블럭 단위로 한번에 선택하고 싶을때 사용하면 좋다.
;; 기본 단축키가 너무 불편해서 변경했다.
(define-key evil-normal-state-map (kbd "M-s-k") #'er/expand-region)
(define-key evil-normal-state-map (kbd "M-s-j") #'er/contract-region)
(define-key evil-insert-state-map (kbd "M-s-k") #'er/expand-region)
(define-key evil-insert-state-map (kbd "M-s-j") #'er/contract-region)
;;ivy 미니 버퍼에서 컨트롤 키로 아이템을 선택하는건 새끼손가락에 죄를 짓는 일이다.
(map! :after ivy :map ivy-minibuffer-map "TAB" 'next-line)
;; ORG 모드에서 헤더 레벨 설정할때 쓰기 편한 단축키
(map! :after org-mode :map org-mode-map ">" 'org-cyclt-level)
;; <SPC> w C-o 는 너무 누르기 힘들지만 이게 의외로 많이 쓰인다. 쓰이지 않는 키 바인딩에 할당해서 더 간단히 만든다.
(map! :leader :prefix "w" :desc "Close Other Windows Fast Binding" "O" 'delete-other-windows)
(map! :leader :n "," 'switch-to-buffer)
#+END_SRC
**** Bindings 2
조금 복잡해지는 바인딩들. 그래도 이것들이 있어서 편하다.
#+BEGIN_SRC elisp :tangle config.el
;; 둠 이맥스 디스코드 채널에서 고수가 제안한 새로운 바인딩
;; https://discord.com/channels/406534637242810369/695450585758957609/759868990909841438
(after! evil
  (require 'evil-textobj-anyblock)
  (evil-define-text-object my-evil-textobj-anyblock-inner-quote
    (count &optional beg end type)
    "Select the closest outer quote."
    (let ((evil-textobj-anyblock-blocks
           '(("'" . "'")
             ("\"" . "\"")
             ("`" . "`")
             ("“" . "”"))))
      (evil-textobj-anyblock--make-textobj beg end type count nil)))
  (evil-define-text-object my-evil-textobj-anyblock-a-quote
    (count &optional beg end type)
    "Select the closest outer quote."
    (let ((evil-textobj-anyblock-blocks
           '(("'" . "'")
             ("\"" . "\"")
             ("`" . "`")
             ("“" . "”"))))
      (evil-textobj-anyblock--make-textobj beg end type count t)))
  (define-key evil-inner-text-objects-map "q" 'my-evil-textobj-anyblock-inner-quote)
  (define-key evil-outer-text-objects-map "q" 'my-evil-textobj-anyblock-a-quote)
  )

 #+END_SRC

** Programming
*** CCLS Custom Setting
#+begin_src elisp :tangle +custom_funcs.el
(defun custom-cc-mode ()
  "Custom cc-mode make support qml, qmake etc."
  (interactive)
  (platformio-conditionally-enable)
  (setq lsp-prefer-flymake nil
        ccls-executable "/usr/local/bin/ccls"
        lsp-ui-peek-fontify 'always
        lsp-ui-doc-include-signature nil  ; don't include type signature in the child fram
        lsp-ui-sideline-show-symbol nil)  ; don't show symbol on the right of info
  (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)))
#+end_src

*** Vue & Typescript Custom Setting
Vue와 타입스크립트를 위한 커스텀 설정 모드.
#+BEGIN_SRC elisp :tangle +custom_funcs.el
(defun setup-custom-jsts-mode ()
  ;; 기본 인덴테이션을 설정한다.
  (lsp)
  (setq typescript-indent-level 2)
  (setq emmet-indentation 2)
  (setq js-indent-level 2)
  ;; (setq global-git-gutter-mode t)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-markup-indent-offset 2)
  (flycheck-mode +1)
  (my/use-eslint-from-node-modules)
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (setq lsp-ui-peek-fontify 'always)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;; (add-hook 'before-save-hook prettier-js nil 'local)
  ;; (prettier-js-mode)
  )

(defun custom-ts-mode ()
  (if (not (equal buffer-file-name 'nil))
      (let ((extname (file-name-extension buffer-file-name)))
        (when (or (string-equal "tsx" extname)
                  (string-equal "ts" extname))
          (setup-custom-jsts-mode)
          ;; (set-company-backend! 'prog-mode '(company-tabnine company-capf company-yasnippet))
          ;; Optional configuration that hides the background color for a highlighted block
          ;; I find it useful for debugging emacs, but when actually coding I dont want so much emphasis on submodes
          (flycheck-select-checker 'javascript-eslint)))))

(defun my/use-eslint-from-node-modules ()
  "Use local eslint from node_modules before global."
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))

(defun custom-vue-mode ()
  "Custom hooks for vue-mode"
  (if (not (equal buffer-file-name 'nil))
      (let ((extname (file-name-extension buffer-file-name)))
        (when (string-equal "vue" extname)
          (setup-custom-jsts-mode)
          ;; (set-company-backend! 'prog-mode '(company-tabnine company-capf company-yasnippet))
          (flycheck-select-checker 'javascript-eslint)
          ))))

#+END_SRC

주로 사용하는 언어들 관련 설정. lsp관련 설정들을 모아 놓았다.
#+BEGIN_SRC elisp :tangle config.el
;; 뷰모드가 느리게 동작하고 아직 버그가 많아서 웹 모드로 바꾼다.
(add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.env\\'" . dotenv-mode))

;; disable CamelCase syntax
(global-subword-mode nil)

;; disable lsp-formating
(setq +format-with-lsp nil)
(setq +format-on-save-enabled-modes
      '(not emacs-lisp-mode
            sql-mode
            tex-mode
            latex-mode))

(add-hook 'web-mode-hook #'format-all-mode)
(add-hook 'cc-mode-hook #'format-all-mode)
(add-hook 'typescript-mode-hook #'format-all-mode)
(add-hook 'typescript-tsx-mode-hook #'format-all-mode)

(add-hook 'web-mode-hook 'custom-vue-mode)
(add-hook 'typescript-mode-hook 'custom-ts-mode)
(add-hook 'typescript-tsx-mode-hook 'custom-ts-mode)
(add-hook 'cc-mode-hook 'custom-cc-mode)
(add-hook 'c++-mode-hook 'custom-cc-mode)

(setq lsp-auto-guess-root t)
;; (after! typescript-mode
;;   (set-company-backend! 'typescript-mode '(company-tabnine company-capf company-yasnippet)))
(setq flycheck-global-modes '(not conf-colon-mode gfm-mode forge-post-mode gitlab-ci-mode dockerfile-mode Org-mode org-mode))

;; all-the-icons에 아이콘 색깔을 바꾸기 위해서 수동으로 설정한다.
;; (add-hook 'company-mode-hook 'company-box-mode)
;; (setq company-box-icons-alist 'company-box-icons-idea)
;; (setq company-tooltip-minimum-width 60)
;; (setq company-tooltip-maximum-width 60)
;; (setq company-box-doc-enable nil)

;; 린트 에러 버퍼를 오픈하면 포커스가 자동으로 이동하지 않는다.
;; 이거 없으면 생각보다 귀찮아진다.
(add-hook 'flycheck-error-list-mode-hook (lambda () (switch-to-buffer-other-window "*Flycheck errors*")))
#+END_SRC

**** LSP & Tabnine
Tabnine관련 설정들
#+BEGIN_SRC elisp :tangle config.el
(after! ccls
  (setq ccls-initialization-options '(:index (:comments 2) :completion (:detailedLabel t)))
  (set-lsp-priority! 'ccls 2)) ; optional as ccls is the default in Doom

(use-package company-tabnine
  :defer 1
  :custom
  (company-tabnine-max-num-results 9)
  :hook
  (lsp-after-open . (lambda ()
                      (setq company-tabnine-max-num-results 5)
                      (add-to-list 'company-transformers 'company//sort-by-tabnine t)
                      (add-to-list 'company-backends '(company-capf :with company-tabnine :separate))))
  (kill-emacs . company-tabnine-kill-process)
  :config
  ;; Enable TabNine on default
  (add-to-list 'company-backends #'company-tabnine)

  ;; Integrate company-tabnine with lsp-mode
  (defun company//sort-by-tabnine (candidates)
    (if (or (functionp company-backend)
            (not (and (listp company-backend) (memq 'company-tabnine company-backends))))
        candidates
      (let ((candidates-table (make-hash-table :test #'equal))
            candidates-lsp
            candidates-tabnine)
        (dolist (candidate candidates)
          (if (eq (get-text-property 0 'company-backend candidate)
                  'company-tabnine)
              (unless (gethash candidate candidates-table)
                (push candidate candidates-tabnine))
            (push candidate candidates-lsp)
            (puthash candidate t candidates-table)))
        (setq candidates-lsp (nreverse candidates-lsp))
        (setq candidates-tabnine (nreverse candidates-tabnine))
        (nconc (seq-take candidates-tabnine 5)
               (seq-take candidates-lsp 6))))))
#+END_SRC

**** Programming ETC
 개발관련 기타 설정들
#+BEGIN_SRC elisp :tangle config.el

;; 1초라도 빨리 팝업 띄우고 싶어서
;; 그러나 실제 체감속도 향상은 없음
(setq company-idle-delay 0.0)

;; Dash Documents랑 연동이 되도록 각각 메이저에 관련 정보들을 추가한다.
(set-docsets! 'c++-mode "Qt" "C++" "C")
(set-docsets! 'cc-mode "Qt" "C++" "C")
(set-docsets! 'web-mode   "TypeScript" "NodeJS" "HTML" "CSS" "Pug" "Stylus" "VueJS")
(set-docsets! 'typescript "TypeScript" "NodeJS" "HTML" "CSS" "Pug" "Stylus" "VueJS")

;; lsp 설정 이후에 불필요한 옵션들은 전부다 끈다.
;; These take up a lot of space on my big font size
(setq lsp-ui-sideline-show-code-actions nil
      lsp-ui-sideline-show-diagnostics nil
      lsp-modeline-diagnostics-mode nil
      lsp-modeline-diagnostics-enable nil
      lsp-signature-render-all nil)
#+END_SRC
** Magit / Forge
magit이나 dired등과 같이 유틸리티 관련 설정들을 모아 놓았다.
#+BEGIN_SRC elisp :tangle config.el
;; vc & magit 관련 설정
(setq vc-follow-symlinks t)
(setq find-file-visit-truename t)
(setq magit-refresh-status-buffer 'switch-to-buffer)
(setq magit-rewrite-inclusive 'ask)
(setq magit-save-some-buffers t)
(setq magit-set-upstream-on-push 'askifnotset)
(setq magit-diff-refine-hunk 'all)

;; (magit-delta-mode)
(magit-todos-mode)
;; (setq ghub-use-workaround-for-emacs-bug 'force)
(setq forge-topic-list-limit '(200 . 10))

;; ediff를 닫을때 항상 물어보는 거 금지!!
(defadvice! shut-up-ediff-quit (orig-fn &rest args)
  :around #'ediff-quit
  (letf! (defun y-or-n-p (&rest _) t)
    (apply orig-fn args)))

(after! git-link
  (setq git-link-default-remote "upstream"
        git-link-default-branch "develop"
        git-link-open-in-browser nil
  )
  (map! :leader :prefix "g" :desc "get remote link using git-link"  "k" #'git-link)
)
#+END_SRC

Magit의 Forge를 사용하면 깃랩 이슈나 머지리퀘스트를 이맥스에서
편하게 생성할 수 있다.
하는 김에 단축기도 좀 편하게 evil스타일로 변경해본다.
#+BEGIN_SRC elisp :tangle config.el
(after! forge
  ;; (setq auth-sources '("~/.authinfo"))
  (add-to-list 'forge-alist '("gitlab.com" "gitlab.com/api/v4" "gitlab.com" forge-gitlab-repository))
  ;; O-T (Open This)바인딩으로 브라우저에서 링크를 열 수 있도록 지원한다.
  (define-key forge-topic-title-section-map (kbd "ot") 'forge-custom-open-url)
  (define-key forge-topic-marks-section-map (kbd "ot") 'forge-custom-open-url)
  (define-key forge-topic-state-section-map (kbd "ot") 'forge-custom-open-url)
  (define-key forge-topic-labels-section-map (kbd "ot") 'forge-custom-open-url)
  (define-key forge-topic-milestone-section-map (kbd "ot") 'forge-custom-open-url)
  (define-key forge-topic-assignees-section-map (kbd "ot") 'forge-custom-open-url)
  (define-key forge-post-section-map (kbd "ot") 'forge-custom-open-url)
  ;; Y-T (Yank This)바인딩으로 이슈와 커멘트들의 링크를 복사한다.
  (define-key forge-topic-title-section-map (kbd "yt") 'forge-copy-url-at-point-as-kill)
  (define-key forge-topic-marks-section-map (kbd "yt") 'forge-copy-url-at-point-as-kill)
  (define-key forge-topic-state-section-map (kbd "yt") 'forge-copy-url-at-point-as-kill)
  (define-key forge-topic-labels-section-map (kbd "yt") 'forge-copy-url-at-point-as-kill)
  (define-key forge-topic-milestone-section-map (kbd "yt") 'forge-copy-url-at-point-as-kill)
  (define-key forge-topic-assignees-section-map (kbd "yt") 'forge-copy-url-at-point-as-kill)
  (define-key forge-post-section-map (kbd "yt") 'forge-copy-url-at-point-as-kill)
  ;; E-T i(Edit This)바인딩으로 간편하게 모든걸 수정하자
  (define-key forge-topic-title-section-map (kbd "et") 'forge-edit-topic-title)
  (define-key forge-topic-marks-section-map (kbd "et") 'forge-edit-topic-marks)
  (define-key forge-topic-state-section-map (kbd "et") 'forge-edit-topic-state)
  (define-key forge-topic-labels-section-map (kbd "et") 'forge-edit-topic-labels)
  (define-key forge-topic-milestone-section-map (kbd "et") 'forge-edit-topic-milestone)
  (define-key forge-topic-assignees-section-map (kbd "et") 'forge-edit-topic-assignees)
  (define-key forge-post-section-map (kbd "et") 'forge-edit-post)
  (define-key forge-post-section-map (kbd "dt") 'forge-delete-comment)
  (define-key forge-topic-mode-map (kbd "ar") 'forge-create-post)
  ;; 팝업을 별도의 버퍼로 띄우도록 한다.
  ;; (setq magit-display-buffer-function #'+magit-my-display-buffer-fn)
  (setq markdown-display-remote-images t)

  ;;section visibility
  (setq magit-section-initial-visibility-alist
        '((stashes . show)
          (untracked . show)
          (unstaged . show)
          (staged . show)
          (unpushed . show)
          (todos . show)
          (issues . show)
          (pullreqs . show)))
  )
#+END_SRC

# ** Mail
# *** Basic Coonfiguration
# Mail관련 설정을 추가 한다.
# mbsync와 mu4e 패키지를 사용한다. mbsync관련 설정은 구글에 많이 자료가 존재한다. 고마워요 구글.
# #+BEGIN_SRC elisp :tangle config.el
# (add-to-list 'load-path "/usr/local/Cellar/mu/1.4.13/share/emacs/site-lisp/mu/mu4e")
# (use-package! mu4e)
# (after! mu4e
#   (setq mu4e-attachment-dir "~/Downloads"
#         mu4e-compose-signature-auto-include t
#         mu4e-get-mail-command "true"
#         mu4e-maildir "~/Mailbox"
#         mu4e-update-interval (* 2 60)
#         mu4e-get-mail-command "mbsync -a"
#         mu4e-use-fancy-chars t
#         mu4e-view-show-addresses t
#         mu4e-view-show-images t
#         mu4e-index-update-in-background t
#         mu4e-index-update-error-warning nil
#         mu4e-confirm-quit nil
#         mu4e-compose-format-flowed t
#         ;; +mu4e-min-header-frame-width 142
#         mu4e-headers-date-format "%y/%m/%d"
#         mu4e-headers-time-format "%H:%M:%S"
#         mu4e-index-cleanup t)

#   ;; 메일 목록 화면에서 컬럼 사이즈를 재조정한다.
#   (setq mu4e-headers-fields '((:human-date . 10)
#                               (:subject    . nil)))
#   ;;메일 폴더를 빠르게 선택할 수 있는 단축키도 지정한다.
#   (setq mu4e-maildir-shortcuts '((:maildir "/jjpark78@gmail.com/inbox"   :key ?i)
#                                  (:maildir "/jjpark78@gmail.com/sent"    :key ?s)
#                                  ))
#   ;;리플라이나 포워딩을 할때 원본 메세지의 받은 주소를 자동으로 보내는 사람 필드에 설정한다.
#   (add-hook 'mu4e-compose-pre-hook
#             (defun my-set-from-address ()
#               "Set the From address based on the To address of the original."
#               (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
#                 (when msg
#                   (setq user-mail-address
#                         (cond
#                          ((mu4e-message-contact-field-matches msg :to "jjpark@jjsoft.kr") "jjpark@jjsoft.kr")
#                          ((mu4e-message-contact-field-matches msg :to "jjpark78@outlook.com") "jjpark78@outlook.com")
#                          ((mu4e-message-contact-field-matches msg :to "pjj78@naver.com") "pjj78@naver.com")
#                          ((mu4e-message-contact-field-matches msg :to "admin@jjsoft.kr") "admin@jjsoft.kr")
#                          (t "jjpark78@gmail.com")))))))
#   )
# #+END_SRC

# *** SMTP
# smtp 서버를 설정한다.
# #+BEGIN_SRC elisp :tangle config.el
# (set-email-account! "Gmail"
#                     '((user-full-name         . "Jaejin Park")
#                       (smtpmail-smtp-server   . "smtp.gmail.com")
#                       (smtpmail-smtp-service  . 587)
#                       (smtpmail-stream-type   . starttls)
#                       (smtpmail-debug-info    . t)
#                       (mu4e-drafts-folder     . "/Drafts")
#                       (mu4e-refile-folder     . "/Archive")
#                       (mu4e-sent-folder       . "/Sent Items")
#                       (mu4e-trash-folder      . "/Deleted Items")
#                       )
#                     nil)
# #+END_SRC

# *** Render HTML email
# 요즘의 대부분의 이메일은 raw text보다는 html + image 조합이 더 일반적인다.
# 그래서 기능이 부족한 shr 보다는 그냥 webkit으로 렌더링 하도록 한다. mu4e-views는 이를 위한 패키지이다
# 이맥스에는 내가 하고 싶은 거의 모든것이 이미 구현되어 있다.
# #+BEGIN_SRC elisp :tangle config.el
# (use-package! mu4e-views
#   :after mu4e
#   :defer nil
#   :bind (:map mu4e-headers-mode-map
# 	    ("v" . mu4e-views-mu4e-select-view-msg-method) ;; select viewing method
# 	    ("M-n" . mu4e-views-cursor-msg-view-window-down) ;; from headers window scroll the email view
# 	    ("M-p" . mu4e-views-cursor-msg-view-window-up) ;; from headers window scroll the email view
# 	    )
#   :config
#   (setq mu4e-views-mu4e-html-email-header-style
#           "<style type=\"text/css\">
#   .mu4e-mu4e-views-mail-headers { font-family: sans-serif; font-size: 10pt; margin-bottom: 30px; padding-bottom: 10px; border-bottom: 1px solid #ccc; color: #000;}
#   .mu4e-mu4e-views-header-row { display:block; padding: 1px 0 1px 0; }
#   .mu4e-mu4e-views-mail-header { display: inline-block; text-transform: capitalize; font-weight: bold; }
#   .mu4e-mu4e-views-header-content { display: inline-block; padding-right: 8px; }
#   .mu4e-mu4e-views-email { display: inline-block; padding-right: 8px; }
#   .mu4e-mu4e-views-attachment { display: inline-block; padding-right: 8px; }
#   </style>")
#   (setq mu4e-views-completion-method 'ivy) ;; use ivy for completion
#   (setq mu4e-views-default-view-method "browser") ;; make xwidgets default
#   (mu4e-views-mu4e-use-view-msg-method "browser") ;; select the default
#   (setq mu4e-views-next-previous-message-behaviour 'stick-to-current-window)
#   (map! :map mu4e-headers-mode-map
#         :n "M-b" #'mu4e-views-cursor-msg-view-window-up
#         :n "M-f" #'mu4e-views-cursor-msg-view-window-down
#         :localleader
#         :desc "Message action"        "a"   #'mu4e-views-mu4e-view-action
#         :desc "Scoll message down"    "b"   #'mu4e-views-cursor-msg-view-window-up
#         :desc "Scoll message up"      "f"   #'mu4e-views-cursor-msg-view-window-down
#         :desc "Open attachment"       "o"   #'mu4e-views-mu4e-view-open-attachment
#         :desc "Save attachment"       "s"   #'mu4e-views-mu4e-view-save-attachment
#         :desc "Save all attachments"  "S"   #'mu4e-views-mu4e-view-save-all-attachments
#         :desc "Set view method"       "v"   #'mu4e-views-mu4e-select-view-msg-method)) ;; select viewing method)
#   #+END_SRC

# *** Alert
# 새로운 메일이 도착할때 마다 데스크탑과 Emacs 상태바에 알람을 표시한다.
#  #+BEGIN_SRC elisp :tangle config.el
# (use-package mu4e-alert
#   :config
#   (mu4e-alert-set-default-style 'notifier)
#   (mu4e-alert-enable-notifications)
#   )

# ;; (defun refresh-mu4e-alert-mode-line ()
# ;;   (interactive)
# ;;   (call-process-shell-command "~/.doom.d/update_mail.sh" nil 0)
# ;;   (mu4e-alert-enable-mode-line-display))

# ;; (run-with-timer 0 180 'refresh-mu4e-alert-mode-line)

# ;; (map! :leader :prefix "o" :desc "update email index manually" "M" #'refresh-mu4e-alert-mode-line)
#  #+END_SRC
** Org-Mode

ORG모드를 위한 함수들
#+BEGIN_SRC elisp :tangle +custom_funcs.el
(defun my-org-config/after-org-mode-load ()
  ;; (visual-line-mode)
  (require 'org-indent)
  (org-indent-mode)
  )
#+END_SRC

요즘 열공중인 그렇게 대단하다 침이 마르지 않게 칭찬해대는 ORG모드에 대한 설정들을 따로 모아 놓았다.
#+BEGIN_SRC elisp :tangle config.el
;; start my org settings
;; config some hooks
(after! org
  (add-hook 'org-mode-hook 'my-org-config/after-org-mode-load)
  ;;basic org mode config
  (setq
   org-fontify-quote-and-verse-blocks nil
   org-fontify-whole-heading-line nil
   org-hide-leading-starts nil
   org-startup-indented nil
   org-hide-emphasis-markers t
   org-directory "~/org/"
   org-agenda-skip-scheduled-if-done t
   org-ellipsis " ▾ "
   org-tags-column -80
   org-agenda-span 30
   org-agenda-files '("~/org")
   org-log-done 'time
   org-refile-targets (quote ((nil :maxlevel . 1)))
   +org-capture-todo-file "tasks.org"
   org-edit-src-content-indentation 0
   org-src-tab-acts-natively t
   org-src-preserve-indentation t
   ;; config org-super-agenda
   org-super-agenda-mode t
   org-super-agenda-header-map nil
   org-deadline-warning-days 7
   org-agenda-skip-scheduled-if-done t
   org-agenda-block-separator 9472
   org-agenda-start-on-weekday nil
   org-super-agenda-groups '((:name "Today"
                              :time-grid t
                              :scheduled today)
                             (:name "Due today"
                              :deadline today)
                             (:name "Important"
                              :priority "A")
                             (:name "Overdue"
                              :deadline past)
                             (:name "Due soon"
                              :deadline future)))
  ;; org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕"))
  (set-face-attribute 'org-link nil :weight 'normal :background nil)
  (set-face-attribute 'org-code nil :foreground "#a9a1e1" :background nil)
  (set-face-attribute 'org-date nil :foreground "#5B6268" :background nil)
  (set-face-attribute 'org-level-1 nil :foreground "steelblue2" :background nil :height 1.2 :weight 'normal)
  (set-face-attribute 'org-level-2 nil :foreground "slategray2" :background nil :height 1.0 :weight 'normal)
  (set-face-attribute 'org-level-3 nil :foreground "SkyBlue2" :background nil :height 1.0 :weight 'normal)
  (set-face-attribute 'org-level-4 nil :foreground "DodgerBlue2" :background nil :height 1.0 :weight 'normal)
  (set-face-attribute 'org-level-5 nil :weight 'normal)
  (set-face-attribute 'org-level-6 nil :weight 'normal)
  (set-face-attribute 'org-document-title nil :foreground "SlateGray1" :background nil :height 1.75 :weight 'bold)
  (set-face-attribute 'org-document-title nil
                      :foreground "White"
                      :height 1.2
                      :weight 'bold)

  ;; 기본 단추들이 맘에 안들어서 커보이는 것들 순으로 다시 조정했다.
  (use-package org-bullets
    :init
    (setq org-bullets-bullet-list '("✸" "✸" "✸" "✸" "✸"))
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  ;;기타 ORG모드 설정
  (use-package! org-mac-link
    :after org
    :config
    (setq
     org-mac-grab-Acrobat-app-p nil
     org-mac-grab-devonthink-app-p nil
     org-html-htmlize-output-type 'css
     org-download-method 'attach
     global-org-pretty-table-mode t)
    (map! :leader
          :map org-mode-map
          :desc "link from mac apps"
          "mlm"  #'org-mac-grab-link))
  )
#+END_SRC

** RSS Feed
*** Custom Elfeed Search Column
기본 피드 목록 화면은 한글 제목의 문자열 길이 계산에 버그가 있는지
컬럼 정렬이 뒤죽박죽이다.
그래서 컬럼 순서에서 제목 부분을 제일 뒤로 두어 깔끔하게 정렬되도록 한다.
구글링 해서 찾았음.
#+BEGIN_SRC elisp :tangle +custom_funcs.el
(defun feed-reader/search-print (entry)
      "Print ENTRY to the buffer."
      (let* ((feed-width 16)
              (tags-width 8)
              (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
              (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
              (feed (elfeed-entry-feed entry))
              (feed-title
              (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
              (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
              (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
              (title-width (- (window-width) feed-width tags-width 4))
              (title-column (elfeed-format-column
                              title (elfeed-clamp
                              elfeed-search-title-min-width
                              title-width
                              elfeed-search-title-max-width)
                              :left))
              (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str) tags-width tags-width)
                      :left))
              (feed-column (elfeed-format-column
                      feed-title (elfeed-clamp feed-width feed-width feed-width)
                      :left)))
      (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
      (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
      (insert (propertize title 'face title-faces 'kbd-help title))))

 (setq elfeed-search-print-entry-function #'feed-reader/search-print)
#+END_SRC

이맥스에서 RSS피드를 받아 보기에 편하다.
#+BEGIN_SRC elisp :tangle config.el
(setq elfeed-feeds '(
                     "http://www.bloter.net/feed"
                     "https://d2.naver.com/d2.atom"
                     "https://engineering.linecorp.com/ko/feed/"
                     "https://emacsredux.com/atom.xml"
                     "http://sachachua.com/blog/category/emacs/feed"
                     "https://planet.emacslife.com/atom.xml"
                     "https://www.emacswiki.org/emacs?action=rss;match=%5E%5Cd%5Cd%5Cd%5Cd-%5Cd%5Cd-%5Cd%5Cd"
                     "https://feeds.feedburner.com/zdkorea"
                     ))
#+END_SRC

** Utils
*** Ripgrep
rg.el 관련 설정.
#+BEGIN_SRC elisp :tangle config.el
(use-package rg
  :config
  (setq rg-group-result t
        rg-hide-command t
        rg-show-columns nil
        rg-show-header t
        rg-custom-type-aliases nil
        rg-default-alias-fallback "all")
  ;; 버퍼가 열리면 포커스를 그쪽으로 이동시킨다.
  ;; 이거 없으면 생각보다 귀찮아진다.
  (add-hook 'rg-mode-hook (lambda () (switch-to-buffer-other-window "*rg*"))))
#+END_SRC

*** Google, StackOverFlow Search
구글 검색, 각종 사이트 검색을 편리하게 하기 위한 간단한 유틸리티 함수들
구글링으로 찾았다.
#+BEGIN_SRC elisp :tangle +custom_funcs.el
(defun stackoverflow-search ()
"search keyword in google code search and stackoverflow.com"
    (interactive)
    (require 'w3m)
    (let ((keyword (w3m-url-encode-string (read-string "Enter Search Text: "))))
      (browse-url (concat "http://www.google.com/search?hl=en&q=" keyword "+site:stackoverflow.com")))
)

(defun google-search ()
"search word under cursor in google code search and google.com"
    (interactive)
    (require 'w3m)
    (let ((keyword (w3m-url-encode-string (read-string "Enter Search Text: "))))
      (browse-url (concat "http://www.google.com/search?hl=en&q=" keyword )))
)

#+END_SRC

*** Forge Custom Open Link
Forge에서 브라우저로 바로 열수 있는 함수를 사용한다.
#+BEGIN_SRC elisp :tangle +custom_funcs.el
(defun forge-custom-open-url ()
  (interactive)
  (if-let ((url (forge-get-url (or (forge-post-at-point)
                                   (forge-current-topic)))))
      (progn
        (message "Open Url: %S" url)
        (browse-url-generic url)))
  )
#+END_SRC

*** Toggle Window Layout
윈도우를 두개로 나누었을때 가로, 세로 나누기로 변경하는 함수.
#+BEGIN_SRC elisp :tangle +custom_funcs.el
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))
#+END_SRC

** ETC
*** Shell Utils
쉘 설정 파일을 바로 불어 올 수 있는 함수.
단축기와 연동하여 사용한다.
zsh관련 설정 파일을 만질 일이 있을때 요긴하게 잘 사용한다.
#+BEGIN_SRC elisp :tangle +custom_funcs.el
(defun er-find-alacritty-init-file ()
  "Edit the shell init file in another window."
  (interactive)
    (find-file-other-window (expand-file-name ".config/alacritty/alacritty.yml" (getenv "HOME"))))

(defun er-find-shell-init-file ()
  "Edit the shell init file in another window."
  (interactive)
  (let* ((shell (car (reverse (split-string (getenv "SHELL") "/"))))
         (shell-init-file (cond
                           ((string-equal "zsh" shell) ".zshrc")
                           ((string-equal "bash" shell) ".bashrc")
                           (t (error "Unknown shell")))))
    (find-file-other-window (expand-file-name shell-init-file (getenv "HOME")))))
#+END_SRC

*** Custom Variables
#+BEGIN_SRC elisp :tangle custom.el
(custom-set-variables
 '(warning-suppress-types '((initialization) (lsp-mode))))
(custom-set-faces
 )
#+END_SRC
